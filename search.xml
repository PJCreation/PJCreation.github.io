<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>转-Python虚拟环境教程</title>
      <link href="/2024.08/%E8%BD%AC-Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%95%99%E7%A8%8B/"/>
      <url>/2024.08/%E8%BD%AC-Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style> --><p> <a href="https://www.cnblogs.com/litifeng/p/17765295.html">python自带工具 venv 简明教程</a></p><p>在Python中，代码可能依赖特定版本的包，如果代码a和代码b依赖包c的不同版本，这个时候就会导致 a 和 b 无法共存，也就是 a 和 b 存在冲突。</p><p>用 venv 解决办法就是，创建 2 个不同的虚拟环境来分别存放 a 和 b，这样就可以解决问题了。</p><p>以这个问题为例，简单说明如何使用 venv，需要特别说明的是：venv不能解决不同版本python的依赖问题，即 venv 只能解决同一 python 版本下不同版本的包的依赖问题。</p><p>原因也好理解，venv 是python自带的嘛。<br>不同版本的python看作上层，每一个版本的python下又有该版本可正常运行的软件，这个可以看作下层。venv解决的就是每一个版本下的软件树冲突的问题。这也是最常见的方式，因为现在软件都是增量更新，新版本都是在旧版本上增加新的功能，而不会改变以前有的功能。<br>在debian系的系统中，由于系统用 python3-xyz 的方式安装了一些包，这些包被系统下的某些软件依赖。当我们再用 pip 安装包与系统安装的包产生冲突时，有可能会使依赖包失效。<br>为了解决这个问题，可用 venv 产生一个虚拟环境，pip在虚拟环境运行，这样避免和系统环境的包冲突。</p><ul><li><p>1、安装 venv</p><p>  sudo apt install python3-venv</p></li><li><p>2、创建虚拟环境</p><p>  存放软件a<br>  python3 -m venv a_env<br>  存放软件 b<br>  python3 -m venv b_env</p></li><li><p>3、启用虚拟环境</p><p>  启动 a 环境<br>  source .&#x2F;a_env&#x2F;bin&#x2F;activate<br>  安装 a 软件<br>  pip install a<br>  同样的方法启动 b 环境</p><p>  这样就可以分别对 a 和 b 安装不同版本的依赖包 c 了。</p></li><li><p>4、退出环境</p><p>  deactivate</p></li><li><p>5、查看有几个 venv 环境</p><p>  没有这个命令，venv简单说就是一个python文件，这也是为啥不能管理不同的 python 版本。但可以通过把所有的环境放到同一个目录里面，这样通过 ls 就可以看到有几个不同环境了。</p></li><li><p>6、venv的帮助文件命令</p><p>  通过 python3 -m venv –help 来查看简单的命令说明。</p><p>  官方的详细解释：venv — 创建虚拟环境 — Python 3.12.0 文档</p><p>  关于python的PEP文档：PEP 405 – Python Virtual Environments | peps.python.org</p></li><li><p>7、几个常用参数的说明<br>  这些参数用于自定义和控制python3 -m venv命令创建的Python虚拟环境的行为。下面是对每个参数的解释以及使用示例：</p><p>  –system-site-packages<br>  解释: 此选项允许虚拟环境访问系统的site-packages目录，这意味着虚拟环境中不仅包含独立的库，还可以使用系统级别的Python库。这对于那些希望在隔离环境中同时使用一些全局安装的库的情况很有用。<br>  示例: python3 -m venv –system-site-packages myenv 创建名为myenv的虚拟环境，并使其能够访问系统全局的site-packages。<br>  –symlinks<br>  解释: 当平台默认不使用符号链接时，尝试使用符号链接代替复制文件来创建虚拟环境。这可以节省磁盘空间，但可能在某些文件系统或平台上不总是可行。<br>  示例: python3 -m venv –symlinks myenv 在支持的情况下，尝试使用符号链接创建myenv虚拟环境中的文件结构。<br>  –copies<br>  解释: 即使在平台上默认使用符号链接，也强制使用复制而非符号链接来创建虚拟环境的文件。这保证了环境的完全独立性，但可能会占用更多存储空间。<br>  示例: python3 -m venv –copies myenv 强制在创建myenv虚拟环境时使用文件复制。<br>  –clear<br>  解释: 如果虚拟环境目录已经存在，该选项会先清空其内容然后再创建新的虚拟环境。这用于重置或更新一个现有的虚拟环境。<br>  示例: python3 -m venv –clear myenv 如果myenv已存在，会先清除其内部所有内容，然后重新创建虚拟环境。<br>  –upgrade<br>  解释: 如果Python已经被原地升级（在同一路径下更新了版本），此选项会更新虚拟环境以使用新版本的Python。适用于Python升级后需要同步更新虚拟环境的情况。<br>  示例: python3 -m venv –upgrade myenv 如果Python版本已变更，更新myenv虚拟环境以匹配当前Python版本。<br>  –without-pip<br>  解释: 创建虚拟环境时不安装或升级pip。这适用于希望保持环境极其精简或手动控制pip安装的情况。<br>  示例: python3 -m venv –without-pip minimalenv 创建一个不包含pip的虚拟环境minimalenv。<br>  –prompt PROMPT<br>  解释: 自定义虚拟环境激活时的命令行提示前缀。PROMPT是你想要设置的自定义前缀。<br>  示例: python3 -m venv –prompt&#x3D;(myproj) projectenv 创建名为projectenv的虚拟环境，激活时提示前缀为(myproj)。<br>  –upgrade-deps<br>  解释: 升级虚拟环境中的核心依赖（主要是pip）到PyPI上的最新版本。这确保了虚拟环境使用的工具是最新状态。<br>  示例: python3 -m venv –upgrade-deps freshenv 创建并确保freshenv虚拟环境中的pip等核心库为最新版本。</p></li></ul><p>通过组合使用这些选项，你可以灵活地定制虚拟环境的创建过程，以满足不同的开发需求。<br>标签: python </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AI大模型的本地部署——安装open-webui</title>
      <link href="/2024.08/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85open-webui/"/>
      <url>/2024.08/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85open-webui/</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style> --><p>您的文档已经成功格式化，以下是排版后的内容：</p><p>首先,这是open-webui项目的github仓库 <a href="https://github.com/open-webui/open-webui">open-webui</a></p><h2 id="安装open-webui"><a href="#安装open-webui" class="headerlink" title="安装open-webui"></a>安装open-webui</h2><ul><li><p>相信我们已经安装好ollama了，但是命令行的形式让很多人难以接受，特别是使用过ChatGPT之类的AI之后。<br>  所以我们接下来要安装对于ollama适配度最高的，备受好评的webui,open-webui。</p><p>  我要使用接受度最高的docker方式来安装open-webui。open-webui的官方docker镜像在github镜像仓库。ghcr.io</p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>  由于众所周知的原因，我们拉取官方镜像的过程一波三折，最终还是失败了。</p><p>  但是，幸好有好心人，他部署了镜像站。<a href="https://docker.aityp.com/image/ghcr.io/open-webui/open-webui:main">镜像站</a><br>  我们可以直接执行命令拉取镜像</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull swr.cn-north-4.myhuaweicloud.com/ddn-k8s/ghcr.io/open-webui/open-webui:main</span><br></pre></td></tr></table></figure><p>  我们可以通过 <code>docker images</code> 命令查看拉取的docker镜像。</p></li></ul><h3 id="容器部署"><a href="#容器部署" class="headerlink" title="容器部署"></a>容器部署</h3><p>docker run –name open-webui -p 3000:8080 -v open-webui:&#x2F;app&#x2F;backend&#x2F;data –restart always swr.cn-north-4.myhuaweicloud.com&#x2F;ddn-k8s&#x2F;ghcr.io&#x2F;open-webui&#x2F;open-webui:main</p><p>请根据您的具体需求调整上述代码中的配置。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024.08/hello-world/"/>
      <url>/2024.08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-Docker命令</title>
      <link href="/2022.06/Linux-Docker%E5%91%BD%E4%BB%A4/"/>
      <url>/2022.06/Linux-Docker%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<!-- <div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style> --><h2 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h2><h3 id="Docker容器详细信息"><a href="#Docker容器详细信息" class="headerlink" title="Docker容器详细信息"></a>Docker容器详细信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect &#x27;容器名&#x27;</span><br></pre></td></tr></table></figure><h4 id="修改挂载位置"><a href="#修改挂载位置" class="headerlink" title="修改挂载位置"></a>修改挂载位置</h4><p>先docker ps 找到要修改的容器前缀<br>再到你的系统目录中找镜像位置 例如&#x2F;var&#x2F;lib&#x2F;docker&#x2F;容器ID&#x2F;<br>然后修改config.v2.json文件的两个字段。其中的一个是Mountpoint字段的”source”:””，另一个是”spec”字段的”source”:””,这是你要挂载进容器的目录。<br>修改config.v2.json配置文件前，需要先停止docker，不然会导致修改的配置文件无法覆盖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><h3 id="设置分区挂载位置及挂载卸载命令"><a href="#设置分区挂载位置及挂载卸载命令" class="headerlink" title="设置分区挂载位置及挂载卸载命令"></a>设置分区挂载位置及挂载卸载命令</h3><p>配置文件位置&#x2F;etc&#x2F;fstab<br>填写分区的UUID 挂载位置后，开机自动挂载。<br>挂载命令<code>mount /挂载目录 /目标目录</code><br>卸载命令<code>umount /已挂载目录</code></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
